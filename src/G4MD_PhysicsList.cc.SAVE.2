#include "G4MD_PhysicsList.hh"

#include "G4ParticleDefinition.hh"
#include "G4ParticleTypes.hh"
#include "G4ParticleTable.hh"

#include "G4ParticleWithCuts.hh"

#include "G4Material.hh"
#include "G4MaterialTable.hh"

#include "G4ProcessManager.hh"
#include "G4ProcessVector.hh"

//#include "G4Cerenkov.hh"
//#include "G4OpAbsorption.hh"
//#include "G4OpRayleigh.hh"
//#include "G4OpBoundaryProcess.hh"

#include "G4MuonMinusCaptureAtRest.hh"
#include "G4ios.hh"

G4MD_PhysicsList::G4MD_PhysicsList() : G4VUserPhysicsList()
{
    currentDefaultCut = defaultCutValue = 1.*mm;
    cutForGamma       = 50.*cm;
    cutForElectron    = 0.5*mm;
    cutForMuon        = 0.01*mm;
    cutForProton      = defaultCutValue;

    SetVerboseLevel(5);
}

G4MD_PhysicsList::~G4MD_PhysicsList()
{;}

void G4MD_PhysicsList::ConstructParticle()
{
    ConstructBosons();
    ConstructLeptons();
    ConstructMesons();
    ConstructBaryons();

}

void G4MD_PhysicsList::ConstructBosons()
{    
    // pseudo-particles
    G4Geantino::GeantinoDefinition();
    G4ChargedGeantino::ChargedGeantinoDefinition();

    // gamma
    G4Gamma::GammaDefinition();

    // optical photon
    G4OpticalPhoton::OpticalPhotonDefinition();
}

void G4MD_PhysicsList::ConstructLeptons()
{   
    // leptons
    G4Electron::ElectronDefinition();
    G4Positron::PositronDefinition();
    G4MuonPlus::MuonPlusDefinition();
    G4MuonMinus::MuonMinusDefinition();

    G4NeutrinoE::NeutrinoEDefinition();
    G4AntiNeutrinoE::AntiNeutrinoEDefinition();
    G4NeutrinoMu::NeutrinoMuDefinition();
    G4AntiNeutrinoMu::AntiNeutrinoMuDefinition();
}

void G4MD_PhysicsList::ConstructMesons()
{   
    //  mesons
    G4PionPlus::PionPlusDefinition();
    G4PionMinus::PionMinusDefinition();
    G4PionZero::PionZeroDefinition();
}

void G4MD_PhysicsList::ConstructBaryons()
{
    //  baryons
    G4Proton::ProtonDefinition();
    G4AntiProton::AntiProtonDefinition();
    G4Neutron::NeutronDefinition();
    G4AntiNeutron::AntiNeutronDefinition();
}

void G4MD_PhysicsList::ConstructProcess()
{
    AddTransportation();
    ConstructGeneral();
    ConstructEM();
    ConstructOp();
}

#include <G4Decay.hh>

void G4MD_PhysicsList::ConstructGeneral()
{   
    G4Decay* theDecayProcess = new G4Decay();
    theParticleIterator->reset();
    while( (*theParticleIterator)() )
    {
	G4ParticleDefinition* particle = theParticleIterator->value();
	G4ProcessManager* pmanager = particle->GetProcessManager();
	if (theDecayProcess->IsApplicable(*particle))
	{
	    pmanager->AddDiscreteProcess(theDecayProcess);
	    pmanager->SetProcessOrdering(theDecayProcess, idxPostStep);
	    pmanager->SetProcessOrdering(theDecayProcess, idxAtRest);
	}
    }
}

#include <G4LowEnergyCompton.hh>
#include <G4LowEnergyGammaConversion.hh>
#include <G4LowEnergyPhotoElectric.hh>
#include <G4LowEnergyRayleigh.hh>

#include <G4MultipleScattering.hh>
#include <G4LowEnergyIonisation.hh>
#include <G4LowEnergyBremsstrahlung.hh>
#include <G4eplusAnnihilation.hh>

#include <G4eIonisation.hh>
#include <G4eBremsstrahlung.hh>
#include <G4MuIonisation.hh>
#include <G4MuBremsstrahlung.hh>
#include <G4MuPairProduction.hh>

#include <G4hIonisation.hh>
#include <G4Cerenkov.hh>

void G4MD_PhysicsList::ConstructEM()
{
    theParticleIterator->reset();

    while( (*theParticleIterator)() ) {
	G4ParticleDefinition* particle = theParticleIterator->value();
	G4ProcessManager* pmanager = particle->GetProcessManager();
	G4String particleName = particle->GetParticleName();

    //  NOTE: At low energy, where dE/dX is large for the muon, it is best 
	// to set the following number to something low
    // this is the number in Gonzalo;
	//G4int MaxNumPhotons = 300;
    // this is my vem9 value return to original value;
    //G4VProcess* theCerenkovProcess = new G4Cerenkov("Cerenkov");
    //theCerenkovProcess = new G4Cerenkov("Cerenkov");
    //G4Cerenkov * theCerenkovProcess = new G4Cerenkov("Cerenkov");
    //G4int MaxNumPhotons = 3;
    
    //theCerenkovProcess->SetTrackSecondariesFirst(true);
    //theCerenkovProcess->SetMaxNumPhotonsPerStep(MaxNumPhotons);


    if (particleName == "gamma") {
    // gamma
       pmanager->AddDiscreteProcess(new G4LowEnergyGammaConversion());
       pmanager->AddDiscreteProcess(new G4LowEnergyCompton());
       pmanager->AddDiscreteProcess(new G4LowEnergyRayleigh());
       pmanager->AddDiscreteProcess(new G4LowEnergyPhotoElectric());

    } else if (particleName == "e-") {
    //electron
      pmanager->AddProcess(new G4MultipleScattering(),-1, 1, 1);
      pmanager->AddProcess(new G4LowEnergyIonisation(),       -1, 2, 2);
      pmanager->AddProcess(new G4LowEnergyBremsstrahlung(),   -1, -1, 3);

      } else if (particleName == "e+") {
    //positron
      pmanager->AddProcess(new G4MultipleScattering(),-1, 1, 1);
      pmanager->AddProcess(new G4eIonisation(),       -1, 2, 2);
      pmanager->AddProcess(new G4eBremsstrahlung(),   -1, -1, 3);
      pmanager->AddProcess(new G4eplusAnnihilation(), -1, -1, 4);

    } else if( particleName == "mu+" || particleName == "mu-"    ) {
    //muon  
      pmanager->AddProcess(new G4MultipleScattering(),-1, 1, 1);
      pmanager->AddProcess(new G4MuIonisation(),      -1, 2, 2);
      pmanager->AddProcess(new G4MuBremsstrahlung(),  -1, 3, 3);
      pmanager->AddProcess(new G4MuPairProduction(),  -1, 4, 4);
      pmanager->AddProcess(new G4MuonMinusCaptureAtRest(), 0,-1,-1);

     } else if ( (particle->GetPDGCharge() != 0.0) &&
           (particle->GetParticleName() != "chargedgeantino")) {
       G4VProcess* aMultipleScattering = new G4MultipleScattering();
       G4VProcess* anIonisation        = new G4hIonisation();
       //
       // add processes
       pmanager->AddProcess(aMultipleScattering);
       pmanager->AddProcess(anIonisation);
    }
    }
}
                                   
#include <G4Cerenkov.hh>
#include <G4OpAbsorption.hh>
#include <G4OpRayleigh.hh>
#include <G4OpBoundaryProcess.hh>

void G4MD_PhysicsList::ConstructOp()
{  
    G4Cerenkov*  theCerenkovProcess = new G4Cerenkov("Cerenkov");
    G4OpAbsorption* theAbsorptionProcess         = new G4OpAbsorption();
    G4OpRayleigh*   theRayleighScatteringProcess = new G4OpRayleigh(); 
    G4OpBoundaryProcess* theBoundaryProcess      = new G4OpBoundaryProcess();
 
    theCerenkovProcess->SetMaxNumPhotonsPerStep(300);
    theCerenkovProcess->SetTrackSecondariesFirst(true);
    // ATTENTION : Isn't this set in the DetectorConstruction as well?
    G4OpticalSurfaceModel themodel = unified;
    theBoundaryProcess->SetModel(themodel);
  
    theParticleIterator->reset();
    while( (*theParticleIterator)() ) {      
	  G4ParticleDefinition* particle = theParticleIterator->value();
	  G4ProcessManager* pmanager = particle->GetProcessManager();
	  G4String particleName = particle->GetParticleName();
   
          if (theCerenkovProcess->IsApplicable(*particle)) {
             //pmanager->AddContinuousProcess(theCerenkovProcess);
             pmanager->AddProcess(theCerenkovProcess);
             pmanager->SetProcessOrdering(theCerenkovProcess,idxPostStep);
          }
	  if (particleName == "opticalphoton") {
	     G4cout << " AddDiscreteProcess to OpticalPhoton "<< G4endl;
	    pmanager->AddDiscreteProcess(theAbsorptionProcess);
	    pmanager->AddDiscreteProcess(theRayleighScatteringProcess);
	    pmanager->AddDiscreteProcess(theBoundaryProcess);
	  }
    }
}

void G4MD_PhysicsList::SetCuts()
{ 
  //changing the default value;
  
  //SetCutsWithDefault();   
  // reactualise cutValues
  if (currentDefaultCut != defaultCutValue)
    {
     if(cutForGamma    == currentDefaultCut) cutForGamma    = defaultCutValue;
     if(cutForElectron == currentDefaultCut) cutForElectron = defaultCutValue;
     if(cutForProton   == currentDefaultCut) cutForProton   = defaultCutValue;
     if(cutForMuon     == currentDefaultCut) cutForMuon     = defaultCutValue;
     currentDefaultCut = defaultCutValue;
    }


  if (verboseLevel >0){
    G4cout << "G4PhysicsList::SetCuts:";
    G4cout << "CutLength : " << G4BestUnit(defaultCutValue,"Length") << G4endl;
// set cut values for gamma at first and for e- second and next for e+,
    // because some processes for e+/e- need cut values for gamma 
    SetCutValue(cutForGamma, "gamma");
    SetCutValue(cutForElectron, "e-");
    SetCutValue(cutForElectron, "e+");

    SetCutValue(cutForMuon, "mu-");
    SetCutValue(cutForMuon, "mu+");

    // set cut values for proton and anti_proton before all other hadrons
    // because some processes for hadrons need cut values for proton/anti_proton 
    SetCutValue(cutForProton, "proton");
    SetCutValue(cutForProton, "anti_proton");

    //SetCutValueForOthers(defaultCutValue);

    //if (verboseLevel>0) DumpCutValuesTable();
    //DumpCutValues("ALL");
    //DumpCutValues("gamma");
    //DumpCutValues("e-");
    //DumpCutValues("e+");
    //DumpCutValues("mu-");
    //DumpCutValues("mu+");
  }

  DumpCutValuesTable();
}

void G4MD_PhysicsList::SetCutForGamma(G4double cut)
{
  ResetCuts();
  cutForGamma = cut;
}

void G4MD_PhysicsList::SetCutForElectron(G4double cut)
{
  ResetCuts();
  cutForElectron = cut;
}

void G4MD_PhysicsList::SetCutForProton(G4double cut)
{
  ResetCuts();
  cutForProton = cut;
}

void G4MD_PhysicsList::SetCutForMuon(G4double cut)
{
  ResetCuts();
  cutForMuon = cut;

}

G4double G4MD_PhysicsList::GetCutForGamma() const
{
  return cutForGamma;
}

G4double G4MD_PhysicsList::GetCutForElectron() const
{
  return cutForElectron;
}

G4double G4MD_PhysicsList::GetCutForProton() const
{
  return cutForProton;
}

G4double G4MD_PhysicsList::GetCutForMuon() const
{
  return cutForMuon;
}












